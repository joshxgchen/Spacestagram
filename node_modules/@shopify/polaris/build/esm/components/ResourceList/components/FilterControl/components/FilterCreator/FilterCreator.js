import React, { useState, useRef, useCallback } from 'react';
import { useToggle } from '../../../../../../utilities/use-toggle.js';
import { Form } from '../../../../../Form/Form.js';
import { FormLayout } from '../../../../../FormLayout/FormLayout.js';
import { FilterValueSelector } from '../FilterValueSelector/FilterValueSelector.js';
import { useI18n } from '../../../../../../utilities/i18n/hooks.js';
import { Button } from '../../../../../Button/Button.js';
import { Popover } from '../../../../../Popover/Popover.js';
import { Select } from '../../../../../Select/Select.js';

function FilterCreator({
  filters,
  resourceName,
  disabled,
  onAddFilter
}) {
  const {
    value: popoverActive,
    toggle: togglePopoverActive,
    setFalse: setPopoverActiveFalse
  } = useToggle(false);
  const [selectedFilter, setSelectedFilter] = useState();
  const [selectedFilterKey, setSelectedFilterKey] = useState();
  const [selectedFilterValue, setSelectedFilterValue] = useState();
  const i18n = useI18n();
  const node = useRef(null);
  const canAddFilter = Boolean(selectedFilter && selectedFilterKey && selectedFilterValue);
  const handleButtonFocus = useCallback((...args) => {
    const event = args[0];

    if (!node.current && event) {
      node.current = event.target;
    }
  }, []);
  const handleFilterKeyChange = useCallback(filterKey => {
    const foundFilter = filters.find(filter => {
      const {
        minKey,
        maxKey,
        operatorText
      } = filter;

      if (minKey || maxKey) {
        return filter.key === filterKey || minKey === filterKey || maxKey === filterKey;
      }

      if (operatorText && typeof operatorText !== 'string') {
        return filter.key === filterKey || operatorText.filter(({
          key
        }) => key === filterKey).length === 1;
      }

      return filter.key === filterKey;
    });

    if (!foundFilter) {
      return;
    }

    setSelectedFilter(foundFilter);
    setSelectedFilterKey(filterKey);
    setSelectedFilterValue(undefined);
  }, [filters]);
  const handleFilterValueChange = useCallback(value => {
    setSelectedFilterValue(value);
  }, []);
  const handleAddFilter = useCallback(() => {
    if (!onAddFilter || !canAddFilter || !selectedFilterKey) {
      return;
    }

    onAddFilter({
      key: selectedFilterKey,
      value: selectedFilterValue || ''
    });
    setPopoverActiveFalse();
    setSelectedFilter(undefined);
    setSelectedFilterValue(undefined);

    if (node.current != null) {
      node.current.focus();
    }
  }, [canAddFilter, onAddFilter, selectedFilterKey, selectedFilterValue, setPopoverActiveFalse]);
  const activator = /*#__PURE__*/React.createElement(Button, {
    onClick: togglePopoverActive,
    disclosure: true,
    disabled: disabled,
    onFocus: handleButtonFocus
  }, i18n.translate('Polaris.ResourceList.FilterCreator.filterButtonLabel'));
  const filterOptions = filters.map(({
    key,
    label
  }) => ({
    value: key,
    label
  }));
  const filterValueSelectionMarkup = selectedFilter ? /*#__PURE__*/React.createElement(FilterValueSelector, {
    filter: selectedFilter,
    filterKey: selectedFilterKey,
    value: selectedFilterValue,
    onFilterKeyChange: handleFilterKeyChange,
    onChange: handleFilterValueChange
  }) : null;
  const addFilterButtonMarkup = selectedFilter ? /*#__PURE__*/React.createElement(Button, {
    onClick: handleAddFilter,
    disabled: !canAddFilter
  }, i18n.translate('Polaris.ResourceList.FilterCreator.addFilterButtonLabel')) : null;
  return /*#__PURE__*/React.createElement(Popover, {
    active: popoverActive,
    activator: activator,
    onClose: togglePopoverActive,
    sectioned: true,
    fullHeight: true
  }, /*#__PURE__*/React.createElement(Form, {
    onSubmit: handleAddFilter
  }, /*#__PURE__*/React.createElement(FormLayout, null, /*#__PURE__*/React.createElement(Select, {
    label: i18n.translate('Polaris.ResourceList.FilterCreator.showAllWhere', {
      resourceNamePlural: resourceName.plural.toLocaleLowerCase()
    }),
    placeholder: i18n.translate('Polaris.ResourceList.FilterCreator.selectFilterKeyPlaceholder'),
    options: filterOptions,
    onChange: handleFilterKeyChange,
    value: selectedFilter && selectedFilter.key
  }), filterValueSelectionMarkup, addFilterButtonMarkup)));
}

export { FilterCreator };
