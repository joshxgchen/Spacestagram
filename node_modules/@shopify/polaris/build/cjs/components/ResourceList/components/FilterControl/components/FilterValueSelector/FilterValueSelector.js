'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var types = require('../../types.js');
var useIsMountedRef = require('../../../../../../utilities/use-is-mounted-ref.js');
var DateSelector = require('../DateSelector/DateSelector.js');
var hooks = require('../../../../../../utilities/i18n/hooks.js');
var Select = require('../../../../../Select/Select.js');
var Stack = require('../../../../../Stack/Stack.js');
var TextField = require('../../../../../TextField/TextField.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function FilterValueSelector({
  filter,
  filterKey,
  value,
  onChange,
  onFilterKeyChange
}) {
  const i18n = hooks.useI18n();
  const isMounted = useIsMountedRef.useIsMountedRef();
  const {
    operatorText,
    type,
    label
  } = filter;
  const showOperatorOptions = type !== types.FilterType.DateSelector && operatorText && typeof operatorText !== 'string';
  const handleOperatorOptionChange = React.useCallback(operatorKey => {
    onFilterKeyChange(operatorKey);

    if (!value) {
      return;
    }

    onChange(value);
  }, [onChange, onFilterKeyChange, value]);

  if (showOperatorOptions && operatorText.length !== 0 && !isMounted.current) {
    handleOperatorOptionChange(operatorText[0].key);
  }

  const operatorOptionsMarkup = showOperatorOptions ? /*#__PURE__*/React__default['default'].createElement(Select.Select, {
    label: label,
    labelHidden: true,
    options: buildOperatorOptions(operatorText),
    value: filterKey,
    onChange: handleOperatorOptionChange
  }) : null;
  const selectedFilterLabel = typeof operatorText === 'string' ? operatorText : '';

  switch (filter.type) {
    case types.FilterType.Select:
      return /*#__PURE__*/React__default['default'].createElement(Stack.Stack, {
        vertical: true
      }, operatorOptionsMarkup, /*#__PURE__*/React__default['default'].createElement(Select.Select, {
        label: selectedFilterLabel,
        options: filter.options,
        placeholder: i18n.translate('Polaris.ResourceList.FilterValueSelector.selectFilterValuePlaceholder'),
        value: value,
        onChange: onChange
      }));

    case types.FilterType.TextField:
      return /*#__PURE__*/React__default['default'].createElement(Stack.Stack, {
        vertical: true
      }, operatorOptionsMarkup, /*#__PURE__*/React__default['default'].createElement(TextField.TextField, {
        label: selectedFilterLabel,
        value: value,
        type: filter.textFieldType,
        onChange: onChange,
        autoComplete: "off"
      }));

    case types.FilterType.DateSelector:
      return /*#__PURE__*/React__default['default'].createElement(DateSelector.DateSelector, {
        dateOptionType: filter.dateOptionType,
        filterValue: value,
        filterKey: filterKey,
        filterMinKey: filter.minKey,
        filterMaxKey: filter.maxKey,
        onFilterValueChange: onChange,
        onFilterKeyChange: onFilterKeyChange
      });

    default:
      return null;
  }
}

function buildOperatorOptions(operatorText) {
  if (!operatorText || typeof operatorText === 'string') {
    return [];
  }

  return operatorText.map(({
    key,
    optionLabel
  }) => {
    return {
      value: key,
      label: optionLabel
    };
  });
}

exports.FilterValueSelector = FilterValueSelector;
