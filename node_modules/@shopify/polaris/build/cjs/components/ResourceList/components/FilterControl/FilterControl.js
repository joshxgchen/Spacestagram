'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisIcons = require('@shopify/polaris-icons');
var types = require('./types.js');
var FilterControl$1 = require('./FilterControl.scss.js');
var FilterCreator = require('./components/FilterCreator/FilterCreator.js');
var hooks = require('../../../../utilities/i18n/hooks.js');
var context = require('../../../../utilities/resource-list/context.js');
var utils = require('../../../Button/utils.js');
var Tag = require('../../../Tag/Tag.js');
var FormLayout = require('../../../FormLayout/FormLayout.js');
var TextField = require('../../../TextField/TextField.js');
var Icon = require('../../../Icon/Icon.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/** @deprecated This is a private component, do not use it. This component might be removed in a minor version update. Use <Filters /> instead. */
function FilterControl({
  searchValue,
  appliedFilters = [],
  additionalAction,
  focused = false,
  filters = [],
  placeholder,
  onSearchBlur,
  onSearchChange,
  onFiltersChange
}) {
  if (process.env.NODE_ENV === 'development') {
    // eslint-disable-next-line no-console
    console.warn('Deprecation: <FilterControl /> is deprecated. This is a private component, do not use it. This component might be removed in a minor version update. Use <Filters /> instead.');
  }

  const i18n = hooks.useI18n();
  const {
    selectMode,
    resourceName
  } = React.useContext(context.ResourceListContext);
  const filterResourceName = resourceName || {
    singular: i18n.translate('Polaris.ResourceList.defaultItemSingular'),
    plural: i18n.translate('Polaris.ResourceList.defaultItemPlural')
  };
  const handleAddFilter = React.useCallback(newFilter => {
    if (!onFiltersChange) {
      return;
    }

    const foundFilter = appliedFilters.find(appliedFilter => idFromFilter(appliedFilter) === idFromFilter(newFilter));

    if (foundFilter) {
      return;
    }

    const newAppliedFilters = [...appliedFilters, newFilter];
    onFiltersChange(newAppliedFilters);
  }, [onFiltersChange, appliedFilters]);
  const handleRemoveFilter = React.useCallback(filterId => {
    if (!onFiltersChange) {
      return;
    }

    const foundIndex = appliedFilters.findIndex(appliedFilter => idFromFilter(appliedFilter) === filterId);
    const newAppliedFilters = foundIndex >= 0 ? [...appliedFilters.slice(0, foundIndex), ...appliedFilters.slice(foundIndex + 1, appliedFilters.length)] : [...appliedFilters];
    onFiltersChange(newAppliedFilters);
  }, [appliedFilters, onFiltersChange]);
  const getRemoveFilterCallback = React.useCallback(filterId => {
    return () => {
      handleRemoveFilter(filterId);
    };
  }, [handleRemoveFilter]);
  const textFieldLabel = placeholder ? placeholder : i18n.translate('Polaris.ResourceList.FilterControl.textFieldLabel', {
    resourceNamePlural: filterResourceName.plural.toLocaleLowerCase()
  });

  if (additionalAction) {
    additionalAction.disabled = selectMode;
  }

  const additionalActionButton = additionalAction && utils.buttonsFrom(additionalAction) || null;
  const filterCreatorMarkup = filters.length > 0 ? /*#__PURE__*/React__default['default'].createElement(FilterCreator.FilterCreator, {
    resourceName: filterResourceName,
    filters: filters,
    onAddFilter: handleAddFilter,
    disabled: selectMode
  }) : null;
  const appliedFiltersMarkup = appliedFilters.map(appliedFilter => {
    const activeFilterLabel = getFilterLabel(appliedFilter);
    const filterId = idFromFilter(appliedFilter);
    return /*#__PURE__*/React__default['default'].createElement("li", {
      className: FilterControl$1['default'].AppliedFilter,
      key: filterId
    }, /*#__PURE__*/React__default['default'].createElement(Tag.Tag, {
      onRemove: getRemoveFilterCallback(filterId),
      disabled: selectMode
    }, activeFilterLabel));
  });
  const appliedFiltersWrapper = appliedFilters.length > 0 ? /*#__PURE__*/React__default['default'].createElement("ul", {
    className: FilterControl$1['default'].AppliedFilters
  }, appliedFiltersMarkup) : null;
  return /*#__PURE__*/React__default['default'].createElement(FormLayout.FormLayout, null, /*#__PURE__*/React__default['default'].createElement(TextField.TextField, {
    connectedLeft: filterCreatorMarkup,
    connectedRight: additionalActionButton,
    label: textFieldLabel,
    labelHidden: true,
    placeholder: textFieldLabel,
    prefix: /*#__PURE__*/React__default['default'].createElement(Icon.Icon, {
      source: polarisIcons.SearchMinor,
      color: "subdued"
    }),
    value: searchValue,
    onChange: onSearchChange,
    onBlur: onSearchBlur,
    focused: focused,
    disabled: selectMode,
    autoComplete: "off"
  }), appliedFiltersWrapper);

  function getFilterLabel(appliedFilter) {
    const {
      key,
      value,
      label
    } = appliedFilter;

    if (label) {
      return label;
    }

    const filter = filters.find(filter => {
      const {
        minKey,
        maxKey,
        operatorText
      } = filter;

      if (minKey || maxKey) {
        return filter.key === key || minKey === key || maxKey === key;
      }

      if (operatorText && typeof operatorText !== 'string') {
        return filter.key === key || operatorText.filter(({
          key: operatorKey
        }) => operatorKey === key).length === 1;
      }

      return filter.key === key;
    });

    if (!filter) {
      return value;
    }

    const filterOperatorLabel = findOperatorLabel(filter, appliedFilter);
    const filterLabelByType = findFilterLabelByType(filter, appliedFilter);

    if (!filterOperatorLabel) {
      return `${filter.label} ${filterLabelByType}`;
    }

    return `${filter.label} ${filterOperatorLabel} ${filterLabelByType}`;
  }

  function findFilterLabelByType(filter, appliedFilter) {
    const {
      value: appliedFilterValue
    } = appliedFilter;

    if (filter.type === types.FilterType.Select) {
      const foundFilterOption = filter.options.find(option => typeof option === 'string' ? option === appliedFilterValue : option.value === appliedFilterValue);

      if (foundFilterOption) {
        return typeof foundFilterOption === 'string' ? foundFilterOption : foundFilterOption.label;
      }
    }

    if (filter.type === types.FilterType.DateSelector) {
      if (filter.key === appliedFilter.key) {
        const filterLabelKey = `Polaris.ResourceList.DateSelector.FilterLabelForValue.${appliedFilter.value}`;
        return i18n.translationKeyExists(filterLabelKey) ? i18n.translate(filterLabelKey) : appliedFilter.value;
      }

      if (appliedFilter.key === filter.maxKey) {
        return i18n.translate('Polaris.ResourceList.DateSelector.FilterLabelForValue.on_or_before', {
          date: formatDateForLabelDisplay(appliedFilter.value)
        });
      }

      if (appliedFilter.key === filter.minKey) {
        return i18n.translate('Polaris.ResourceList.DateSelector.FilterLabelForValue.on_or_after', {
          date: formatDateForLabelDisplay(appliedFilter.value)
        });
      }
    }

    return appliedFilterValue;
  }
}

function idFromFilter(appliedFilter) {
  return `${appliedFilter.key}-${appliedFilter.value}`;
}

function formatDateForLabelDisplay(date) {
  if (isNaN(new Date(date).getTime())) {
    return date;
  }

  return new Date(date.replace(/-/g, '/')).toLocaleDateString();
}

function findOperatorLabel(filter, appliedFilter) {
  const {
    operatorText
  } = filter;

  if (filter.type === types.FilterType.DateSelector && (appliedFilter.key === filter.minKey || appliedFilter.key === filter.maxKey)) {
    return '';
  }

  if (!operatorText || typeof operatorText === 'string') {
    return operatorText;
  }

  const appliedOperator = operatorText.find(operator => {
    return operator.key === appliedFilter.key;
  });

  if (appliedOperator) {
    return appliedOperator.filterLabel || appliedOperator.optionLabel;
  }
}

exports.FilterControl = FilterControl;
